    Übung für Montag (Abschluss des Nachmittags-Kapitels)
    =====================================================

    Schreiben Sie eine Reihe kleiner Demo-Programme, welche die unten
    beschriebenen Aussagen demonstrieren. (Alternativ: analysieren Sie die
    Musterlösungen, erklären Sie diese und nehmen testen Sie Ihr Verständnis
    mit Hilfe kleiner Modifikationen oder entfernen Sie die Kommentare vor
    den in den Musterlösungen auskommentierten Zeilen und sehen Sie sich die
    Fehlermeldungen an.)

    Schritt 1:

    Zwischen einer als std::function definierten Variablen und der tatsächlich
    zugewiesenen Funktion (oder dem zugewiesenen Funktor oder dem zugewiesenen
    Lambda) muss keine EXAKTE Typkompatibilität hinsichtlich der Argumente und
    des Ergebnistyps bestehen, da ggf. die bei Funktionsaufrufen üblichen
    Typumwandlungen erfolgen und ein Funktions-Rückgabewert auch verworfen
    werden kann.

    Bei Argumenten, die Referenzen oder Zeiger sind, dürfen die tatsächlich
    zugewiesenen Funktionen eine schwächere aber keine stärkere
    const-Qualifizierung haben.

    Schritt 2:

    Die mittels std::bind erzeugten Funktionen müssen mindestens mit so vielen
    Argumenten aufgerufen werden, wie es dem größten Platzhalter (_1, _2, ...)
    entspricht. (Weniger Argumente führen zu einem Fehler beim Kompilieren,
    mehr Argumente sind aber erlaubt und werden ggf. ignoriert.)

    Schritt 3 (OPTIONAL)

    Demonstrieren Sie basierend auf den folgenden Funktionsdefinition

        template<typename T>
        T* unwrap(T* p) { return p; }
        
        template<typename T>
        T* unwrap(std::reference_wrapper<T> *p) { &p->get(); }
        
        template<typename T> void f(T x) {
            unwrap(&x)->m();
        }

    dass für den Aufruf der Funktion f gilt:

    (a) Normalerweise erfolgt die Parameterübergabe per Wert
    (b) Objekte von Klassen, die keinen Kopier-Konstruktor haben, können nicht
        direkt übergeben werden;
    (c) mit Hilfe eines per std::cref erzeugten Reference-Wrappers ist die
        Übergabe jedoch möglich
        
    Wird bei einer Funktions-Template ein noch offen gehaltener Typ T verwendet
    um WERT-Übergabe zu verlangen, kann 
    (d) mit Hilfe des std::cref-Wrappers dennoch ein Argument übergeben werden,
        das keinen Kopier-Konstruktor besitzt;
    (e) mit Hilfe des std::cref-Wrappers ein Argument so übergeben werden, dass
        eine INNERHALB der Funktion vorgenommene Veränderung seine Wirkung auch
        AUSSERHALB der Funktion hat.

    
