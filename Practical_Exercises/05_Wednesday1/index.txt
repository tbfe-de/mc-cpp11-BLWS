Übung für Mittwoch (Abschluss des Vormittags-Kapitels)
======================================================

Diese Übung beruht auf dem Beispiel in Verzeichnis:

Examples/CPlusPlus/C++11-BLWS/Demos/05_Wednesday1/AirTravel

Sie haben mehrere Möglichkeiten, dieses Beispiel zu kompilieren:

(a) An der Kommandozeile mit: g++ -std=c++11 *.cpp
    Programm dann auisführen mit: ./a.out
(b) Per mitgeliefertem Makefile: make
    Programm dann ausführen mit: ./airtravel
(c) Unter Eclipse: C++11-Projekt anlegen und alle Dateien
                   in dessen Quelltext-Verzeichnis kopieren

1. Abschnitt
------------

Machen Sie sich ein wenig mit den Klassen (Airport.{h,cpp} und Connection.{h,cpp})
sowie dem Hauptprogramm (aitravel.cpp) vertraut.

Lokalisieren Sie mi Quelltext des Hauptprogramms die Hilfetexte und finden Sie heraus,
unter welchen Umständen das Hauptprogramm diese ausgibt.

Lokalisieren Sie in den Klassen Airport und Connection die Verwendung von shared_ptr.

Warum wird in Connection.h der Header-File Airport.h nicht inkludiert, obwohl die
Klasse Airport dort auftaucht?

Warum wird in Airport.h der Header-File Connection.h nicht inkludiert, obwohl die
Klasse Connection dort auftaucht?

Was würde passieren, wenn sich diese beiden Header-Files gegenseitig inkludieren?

Warum müssen die Header-Files in allen *.cpp-Files inkludiert werden bzw. welche
Fehlermeldungen sind zu erwarten, wenn Sie dort ein #include weglassen?

(Betreffend der letzten Fragengruppe können Sie natürlich auch einfach mal ausprobieren,
was passiert.)

2. Abschnitt
------------

Starten Sie das kompilierte Programm und bringen Sie es dazu, den Hilfetext anzuzeigen.

Verwerden Sie den Inklude-Mechanismus und lesen Sie die Datei "setup" ein.

Nutzen Sie einige der vorgesehenen Möglichkeiten, um Flughäfen inklusive der ein-
oder ausgehenden Verbindungen anzuzeigen.

Nutzen Sie die vorgesehenen Möglichkeiten, um Verbindungen anzuzeigen.

Lassen Sie sich die Speichernutzung anzeigen, definieren Sie eine weitere Verbindung
und lassen Sie sich erneut die Speichernutzung anzeigen.

Löschen Sie der Reihe nach die Flughäfen und lassen Sie sich zwischendurch immer wieder
die Speichernutzung anzeigen.

3. Abschnitt
------------

Warum reicht es fr ein Re-Design, das den Memory-Leak vermeidet, ENTWEDER in der
Connection-Klasse ODER in der Airport-Klasse von smart_ptr auf weak_ptr zu wechseln
und welche der beiden Klassen wäre dafür - ausgerichtet am "echten Leben" - der
logischere[*] Kandidat?

[*: So wenig wie es einen Superlativ für "logisch" gibt, wird die Antwort auf den
zweiten Teil der Frage unumstößlich zu bgründen sein ... :-).]

Optional (wenn noch Zeit ist): Führen Sie das entsprechende Re-Design durch.

4. Abschnitt (optional)
-----------------------

Was gilt es zu beachten, wenn man bei der Speichernutzung nicht nur die Anzahl der
Verbindungen und Flughäfen anzeigen möchte sondern auch deren Namen, also z.B. die
Airport- und Connection-Objekte sich in eine Liste eintragen, welche in einem
static-Pointer in der jeweiligen Klasse verankert ist?
